前情回顾
1.query的应用
	操作符使用:
		比较:	$lt $gt $lte $gte $ne $eq $in $nin
		逻辑: $and $or $not $nor
		数组: $all $size
		其他: $exists $mod $type

2.数据处理函数: pretty() 格式化显示 
							limit() 限制查看几个 
							skip 跳过几个 
							sort() 排序 
							count() 计数
							distinct() 查看某一个域的取值范围

3.删除操作: deleteOne() 删除一个 
					 deleteMany() 删除多个 
					 remove() 删除一个或多个false删除所有,true删除一个
					 findOneAndDelete()

4.修改操作: updateOne() updateMany() update()
					 findOneAndUpdate()  findOneAndReplace()
*******************************************************************************
*******************************************************************************
*******************************************************************************
*******************************************************************************

修改器的使用
db.collection.update(query,update,upsert,multi)

$set : 修改一个域的值,或者增加一个域

$unset : 删除一个域
	e.g. 删除一个文档sex域
			db.class0.update({name:'Tom'},{$unset:{sex:''}})

$rename : 修改一个域的域名
	e.g. 修改sex域名为gender
			db.class0.updateMany({},{$rename:{sex:'gender'}})

$setOnInsert : 当update插入文档时,作为补充插入内容
	e.g. : 插入新的文档时,gender:'w' 也会作为文档的域
			db.class0.update({name:'卢锡安'},{$set:{age:20},
			$setOnInsert:{gender:'w'}},true)

$inc : 加法修改器
	e.g. 所有年龄都+1
			db.class0.updateMany({},{$inc:{age:1}})

$mul : 乘法修改器
	e.g. 将所有age域的值 乘以 0.5
			db.class0.updateMany({},{$mul:{age:0.5}})

* $inc $mul 值可以是整数 小数, 正数 负数

$max : 指定某个域的值,如果小于规定值则改为规定值,大于规定值则不变
	e.g. 如果Alex age小于18则改为18,大于18则不变
		db.class0.update({name:'Alex'},{$max:{age:18}})

$min : 指定某个域的值如果大于规定值则改为规则规定值,大于规定值则不变
	e.g. 如果lily age 大于20则改为20 小于20则不变
			db.class0.update({name:'Lily'},{$min:{age:20}})

数组修改器

$push : 向数组中添加一项
	e.g. 向score数组中增加5
			db.class3.update({'name':'小明'},{$push:{score:5}})

$pushAll : 向数组中增加多项
	e.g. 向数组中添加多项内容
			db.class3.update({name:'小红'},{$pushAll:{score:[10,5]}})

$pull : 从数组中删除某一个值(如果有重复值则都删除)
	e.g. 删除score中所有的5
			db.class3.update({name:'小红'},{$pull:{score:5}})

$pullAll : 同时删除数组中多个值
	e.g. 同时删除score中多个值
			db.class3.update({name:'小红'},{$pullAll:{score:[82,10]}})
			
$pop : 弹出数组一项
	e.g. 从数组中弹出一项 1表示最后一项, -1表示第一项
	db.class3.update({name:'小亮'},{$pop:{score:-1}})

$addToSet : 向数组中添加一项, 当时不能添加数组中已有数值
	e.g. 如果score中没有88则添加,如果有则添加不加
			db.class3.update({name:'小红'},{$addToSet:{score:88}})

$each : 对多个值进行逐一操作
	e.g. 利用each同时添加90 10到数组
			 db.class3.update({name:'小红'},{$push:{score:{$each:[90,10]}}})

$position 指定位置插入数值	搭配each使用
	e.g. 将91插入到数组的1号位置
			db.class3.update({name:'小红'},{$push:{score:{$each:[91],$position:1}}})

$sort : 对数组进行排序 搭配each使用
	e.g. 对数组进行升序排序
			db.class3.update({name:'小亮'},{$push:{score:{$each:[],$sort:1}}})


时间类型
	获取当前时间:
		1. new Date() 自动生成当前时间
			e.g.
				db.class1.insert({book:'Python入门',date:new Date()})
		2. ISODate() 自动获取当前时间
			e.g.
				db.class1.insert({bool:'Python精通',date:ISODate()})
		3. Date() 获取系统时间生成时间字符串
			e.g.
				db.class1.insert({bool:'Python放弃',date:Date()})
	
	获取任意时间:
		ISODate()
		功能 : 将制定的时间转换为MongoDB的存储时间类型
		参数 : 指定的时间
					"2018-01-01  11:11:11"
					"20180101 11:11:11"
					"20180101"
	时间:
		valueOf() : 将标准时间转换为时间戳
		e.g.
			db.class1.insert({book:'Python涅槃',date:ISODate().valueOf()})

Null类型数据
	值 : null
	1. 表示某个域的值为空
		e.g. 查找gender域不存在的文档(或者gender域值为null)
			db.class0.find({gender:null},{_id:0})

内部文档(Object)
	文档中某个域的的值还是一个文档则这个文档为内部文档
	* 当使用内部文档某个域的值时,需要用外部文档域,内部文档域的方法引用.此时需要加引号注明
	e.g.
		 db.class2.find({'book.title':'狂人日记'},{_id:0})
	e.g.
		db.class2.update({'book.title':'围城'},{$set:{'book.publication':'人民教育出版社'}})

通过数组下标直接引用数组项
	* 在使用数组时,可以通过数组域 . 数组下标的方式选中数组中具体某一项进行操作.
	e.g. 查找数组第一项大于80的文档
		db.class3.find({'score.0':{$gt:80}},{_id:0})

练习:
	基于之前的 grade 数据库

1. 将王五的年龄修改为8岁,兴趣爱好变为跳舞画画
		db.grade.update({name:'王五'},{$set:{age:8,hobby:['dance','draw']}})
2. 追加赵六兴趣爱好  唱歌
		db.grade.update({name:'赵六'},{$push:{hobby:'唱歌'}})
3. 七七多了兴趣爱好  吹牛 打篮球
		db.grade.update({name:'七七'},{$pushAll:{hobby:['吹牛逼','打篮球']}})
4. 小酒兴趣爱好要增加跑步,唱歌,但是不要和之前的兴趣重复
		db.grade.update({name:'小酒'},{$addToSet:{hobby:{$each:['running','sing']}}})
5. 该班级所有同学年龄+1
	 db.grade.updateMany({},{$inc:{age:1}})
6. 删除赵六的sex属性
		db.grade.update({name:'赵六'},{$unset:{sex:''}})
7. 删除小酒兴趣中的第一个
		db.grade.update({name:'小酒'},{$pop:{hobby:-1}})
8. 删除王五的兴趣画画唱歌
		db.grade.update({name:'王五'},{$pullAll:{hobby:['draw','sing']}})
9. 为七七增加一个域  备注:{民族: '回族', 习俗:'不吃猪肉'}
		db.grade.update({name:'七七'},{$set:{'备注':{'民族':'回族','习俗':'不吃猪肉'}}})
10. 在七七的备注中增加一项  宗教:'耶稣'
		db.grade.update({name:'七七'},{$set:{'备注.宗教':'耶稣'}})


索引
	什么是索引?
		索引是建立文档所在位置的查找清单,使用索引可以方便进行快速查找,减少遍历次数,提高查找效率

	索引约束
		1. 索引本身也占有数据库空间,所以当数据量很小的时候这种消耗是没有必要的
		2. 索引表需要根据数据的修改既是修改,否则索引就会不和内容配套,也就失去了意义.因此如果数据库操作是频繁的修改操作而不是查找操作则不适合创建索引

创建索引
	db.collection.createIndex()
	功能 : 创建索引
	参数 : 索引域 和 索引选项

	e.g. 为name域创建索引
			db.class0.createIndex({name:1})
	* _id域会由系统自动创建索引
	* 1 表示正向索引, -1 表示逆向索引

查看集合中的索引
	db.collection.getIndexes()

自定义索引名
	db.class0.createIndex({age:1},{name:'ageIndex'})
其他创建索引方法
	ensureIndex()
	功能: 创建索引
	参数: 同create相同
	e.g. 创建方法和createIndex用法一致
      db.class1.ensureIndex({book:1})
  
  createIndexes()
  功能: 同时创建多个索引
  参数: 数组中存入创建索引键值对

  e.g.创建name和score两个域的索引
      db.class3.createIndexes([{name:1},{score:-1}])
  
删除索引
  db.collection.dropIndex()
  功能: 删除一个索引
  参数: 索引名称或者索引键值对

  e.g. 通过名称删除索引
      db.class3.dropIndex('name_1')
  
  e.g. 通过键值对删除索引
      db.class3.dropIndex({score:-1})

  db.collection.dropIndexes()
  功能: 删除集合中的所有索引 (不会删除_id索引)

  e.g. 删除class()中所有索引
      db.class0.dropIndexes()

索引类型
  复合索引: 根据多个域创建一个索引

  e.g. 根据name age 创建复合索引
      db.class0.createIndex({name:1,age:-1})
    子文档和数组索引: 如果对某个域创建索引,该域的值为数组或者子文档
    则对数组中某一项或者子文档中某个域的查找也是索引查找

  e.g. 该查找也为索引查找
      db.class2.find({'book.title':'围城'})
  
  唯一索引: 要求创建索引的域不能有重复的值
  
  e.g. 设置唯一索引,内容不能重复
      db.class1.createIndex({name:1},{unique:true})

  稀疏索引: 会在创建索引时忽略没有指定域的文档

  e.g. 对gender创建稀疏索引
      db.class0.createIndex({gender:1},{sparse:true})

聚合操作
  对文档进行数据整理和统计

  db.collection.aggregate()
  功能: 完成聚合操作
  参数: 聚合条件  需要配合聚合操作符使用

  聚合操作符
  $group 分组聚合  往往需要配合一定的统计操作符完成
        统计求和 : $sum

    e.g. 按照gender域的值分组,统计结果叫num,方法为加和
        db.class0.aggregate({$group:{_id:'$gender',num:{$sum:1}}})

    统计平均数
      $avg
    
    e.g. 按照性别分组.求平均年龄
        db.class0.aggregate({$group:{_id:'$gender',num:{$avg:'$age'}}})

  求最大值: $max

    e.g. 按性别分组求最大年龄
       db.class0.aggregate({$group:{_id:'$gender',num:{$max:'$age'}}})

    求最小值: $min
    求第一个数: $first
    求最后一个数: $last

  $project : 用于格式化的显示文档内容

  * 值的用法同find中field参数相同

  e.g. 按照指定名称显示文档内容------大白话:可以改域名
    db.class0.aggregate({$project:{_id:0,Name:'$name',Age:'$age'}})
  
  $match : 筛选数据

  * match值得写法同find中的query参数
  e.g. 筛选年龄大于19岁的文档
      db.class0.aggregate({$match:{age:{$gt:19}}})

作业: 修改操作符熟练使用
     索引操作和聚合操作复习
     所有的知识点复习复习复习