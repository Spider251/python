前情回顾

1. osi七层模型   tcp/ip模型
2. 三次握手和四次挥手    在基于传输层tcp通信服务当中,三次连接是tcp建立连接的过程,四次挥手是tcp断开连接的过程....
                      最后:三次握手和四次挥手是保证tcp传输可靠的手段
3. tcp和udp的区别
    tcp 有连接,可靠的数据传输
    udp 无连接,不可靠的数据传输
4. 网络概念:   主机  端口:3306  IP  域名
5. 套接字 : 网络编程方式
  流式套接字 : tcp
  数据报套接字 : udp

流式套接字服务端流程 : 
socket() --> bind() --> listen() --> accept() --> recv(),send() --> close()

客户端
socket() --> connect() --> send()/recv() --> close()

阻塞函数 
accept()没有连接会阻塞 
recv()没有消息发送会阻塞

**********************************************************************************************************
**********************************************************************************************************
**********************************************************************************************************
cp day01 day02 -ra

tcp套接字传输特征
1.当一端退出时如果另一端阻塞在recv，此时recv会立即结束阻塞返回空字串
2.如果另一端不存在则在调用send发送时会出现Broken Pipe异常
3.一个监听套接字可以同时连接多个客户端，也可以重复使用

网络收发缓冲区 : 
缺点：不能实时保存，容易丢失数据

1.减少和磁盘的交互次数
2.协调收发速度（数据处理速度）

*send和recv实际是向缓冲区发送，从缓冲区接收

TCP粘包

产生原因 : 
1. tcp以字节流的方式进行数据传输, 消息之间没边界
2. 多次发送的消息被一次接收

影响 : 如果每次发送的内容是一个独立含义的个体, 此时粘包会产生影响

处理粘包 : 
1. 将消息结构化
2. 在消息结尾添加结束标志
3. 控制消息发送速度

基于UDP套接字的服务端_______面向无连接的,不可靠的数据连接,没有三次握手,四次挥手

1. 创建数据报套接字
  sockfd = socket(AF_INET,SOCK_DGRAM)

2. 绑定地址
  sockfd.bind(addr)

3. 消息收发
  data,addr = sockfd.recvfrom(buffersize)
  功能 : 接收UDP消息
  参数 : 每次最多接受多少字节消息
  返回值 : data 收到的消息
          addr 消息发送方的地址
  n = sockfd.sendto(data, addr)
  功能 : 发送udp消息
  参数 : data 要发送的消息    bytes格式
        addr 目标地址
  返回 : 发送的字节数

4. 关闭套接字
  sockfd.close()

upd客户端

1. 创建数据报套接字
2. 消息发收
3. 关闭套接字

cookie

获取命令行参数

import sys
sys.argv 属性获取命令行内容

* 将命令行参数以字符串形式收集为一个列表
*****************************************************
*tcp套接字和udp的区别                                  *
* 1.流式套接字是以字节流方式传输数据,数据报则以数据报形式传输 *
* 2.tcp传输会有粘包,udp不会                            *
* 3.tcp保证传输的可靠性,udp不保证                       *
* 4.tcp需要listen accept操作,udp不需要                 *
* 5.tcp使用send recv收发消息,udp使用sendto recvfrom    *
*****************************************************

补充函数 :
sendall(data)
功能 参数 同send
返回值 : 发送成功 None 
        发送失败 得到异常

socket套接字
监听套接字
流式套接字
数据报套接字

套接字属性
sockfd.type 套接字类型
sockfd.family 套接字地址族类型

socket.getsockname()  获取套接字绑定地址

socket.fileno() 获取套接字对应的文件描述符

IO (input and output)
文件描述符 : 系统中每一个IO操作系统都会分配一个整数作为编号
            ,该整数这个IO操作的文件描述符.

* 文件描述符是系统识别IO的标志

sockefd.getpeername() 连接套接字获取连接端地址

sockfd.setsockopt(level,option,value)
功能 : 设置套接字选项, 丰富或者修改套接字属性功能
参数 : level    选项类别  SOL_SOCKET
      option   每个选项类别对应的子选项
      value    对选项设置值

* 创建套接字后立即设置

sockfd.getsockopt(level,option)
功能 : 获取套接字选项
参数 : level    选项类别  SOL_SOCKET
      option   每个选项类别对应的子选项
返回值 : 获取到的选项值


udp应用之广播

广播 : 一点发送, 多点接收
广播地址 : 每个网段的最大地址为广播地址

cookie

format()
功能 : 通过参数合成字符串
s = "{1} is  a {0}".format('Tom','boy')
# s = 'boy is  a Tom'

#设置可以发送接收广播
s.setsockopt(SOL_SOCKET,SO_BROADCAST,True)

TCP应用之http传输

http协议  超文本传输协议  应用层协议

用途 : 网页的获取
      数据的传输

特点 :
1. 应用层协议, 传输层选择tcp传输
2. 简单, 灵活, 很多语言都有http专门借口
3. 无状态协议, 协议本身不要求记录传输的数据
4. http1.1 支持持久连接

网页请求过程:
1. 客户端(浏览器) 通过tcp传输 发送http请求给服务端
2. 服务端接收到http请求后进行解析
3. 服务端处理具体请求内容, 组织相应内容
4. 将相应内容以http相应格式回发给浏览器
5. 浏览器接受相应内容解析展示

http请求 request

  请求格式

    请求行 : 具体的请求类别和请求路径
      格式 : GET       /      HTTP/1.1
           请求类别  请求内容   协议版本

      请求类别
       GET      获取网络资源
       POST     提交一定的信息,得到反馈
       HEAD     只获取相应头
       PUT      更新服务器资源
       DELETE   删除服务器资源
       CONNECT  连接
       TRACE    测试
       OPTIONS  获取服务器性能信息

    请求头 :  对请求内容的基本描述

      (空行)

    请求体 : 请求参数或者提交内容

作业: 使用tcp完成一个文件的传输,要求可以传输文件也可以传输图片
     从客户端发给服务端,或者从服务端发给客户端均可