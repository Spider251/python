前情回顾
1.poll方法实现IO多路复用
  p = poll()
  p.register()
  p.unregister()
  p.poll()
2.epoll方法
  * 效率更高
  * 触发方式更多
  * 监控更多IO
3.struct模块
  功能: 将一组数据,结构化打包发送
  Struct()
  pack()  打包转换为bytes
  unpack()  将bytes数据解包
4.本地套接字
  用于本地两个进程间通信
  d - s b c l p
  b c 驱动文件
  l   超链接文件
  p   管道文件
5.多任务编程
  多进程    多线程
6.进程
  进程状态
  什么是进程
  进程优先级
7.通过os.fork()创建新的进程

***********************************************************
***********************************************************
***********************************************************
day05正课

fork注意:
* 进入阻塞态的进程一定会让出cpu时间片
* 各个进程在自己空间内对数据的操作不影响其他进程
* 父进程在执行fork之前开辟的空间子进程也会复制

进程相关函数
os.getpid()
功能 : 获取当前进程的PID号
参数 : 无
返回值 : 返回当前进程的PID

os.getppid()
功能: 获取父进程PID号
返回值: 返回父进程的PID号

os._exit(status)
功能: 退出进程
参数(整数): 表示自定义的进程退出状态标志

sys.exit([status])
功能: 退出进程
参数: 整数表示退出状态  默认为0
     传入字符串       则退出时会打印字符串内容

孤儿进程和僵尸进程

孤儿进程: 父进程先于子进程退出,此时子进程就会成为孤儿进程

* 孤儿进程会被系统进程收养,此时系统进程就会成为该进程新的父进程

僵尸进程:子进程先于父进程退出,父进程没有处理子进程退出状态,此时子进程就会成为僵尸进程

* 僵尸进程虽然结束但是会存留部分PCB在内存,大量的僵尸进程会占用内存资源

如何避免僵尸进程产生
  * 处理子进程退出状态
  pid,status = os.wait()
  功能: 在父进程中阻塞等待子进程退出
  返回值: pid 退出的子进程的PID
        status 子进程的退出状态
  
  * 处理子进程退出状态
  pid,status = os.waitpid(pid,option)
  功能: 在父进程中阻塞等待子进程退出
  参数: pid     -1         表示等待任意子进程
                >0        等待制定PID的子进程退出
       option   0         阻塞等待
                WNOHANG   表示非阻塞
  返回值: pid 退出的子进程的PID
        status 子进程的退出状态

  * 创建二级子进程
   1.父进程创建子进程等待子进程退出
   2.子进程再创建二级子进程然后退出
   3.二级子进程成为孤儿,和原来父进程各执行任务
  
群聊聊天室
功能: 类似QQ聊天
1.进入聊天室需要输入姓名,姓名不能重复
2.进入聊天室会像其他人发送通知
  xxx 进入聊天室
3.一个人发消息群里其他人都收的到
  xxx 说: xxxxxx
4.当某人退出聊天室,其他人也会收到通知
  xxx 退出聊天室
5.管理员可以发送管理员消息,此时所有人都收到消息
  管理员说: xxxxxxxx

第一步:确定技术模型

消息发送: 转发 先发给服务器再转发给其他人
套接字选择: UDP套接字
用户存储: 字典  {name:ip}
收发关系处理: 多进程 分别处理发送接收

整体设计
1. 封装 将每个功能封装为函数
2. 测试 实现一个功能测试一个功能
3. 编写流程 搭建网络连接  逐个功能实现

具体功能实现
网络连接
    服务端 : 创建udp套接字,绑定地址
            
    客户端 : 创建udp套接字

登录
  服务端 : 1.接收姓名
          2.判断姓名是否存在
          3.根据判断结果返回相应信息
          4.如果不允许登录则功能结束
          5.如果允许登录将用户加入维护的数据结构
          6.将用户登录提示信息发给其他人
  客户端 : 输入姓名
          1.将姓名发送给服务端
          2.接收服务端确认信息
          3.如果不允许则重新输入
          4.如果允许进入聊天室
          5.创建新的进程,一个用于收消息,一个用于发消息
发送消息
  服务端:  
          1.收到消息判定请求类型
          2.调用函数处理: 将消息转发给其他人

  客户端: 
          1.循环写消息
          2.将消息发送给服务器


退出聊天室
  服务端
      接受消息确定消息类型
      将用户从字典中移除
      给其他人发送通知
      给客户的客户端发送标志

  客户端
      输入quit表示退出
      发送退出消息给服务端
      客户端进程退出
      接受特殊标志退出进程
管理员喊话
      子进程发送给父进程
      父进程转发给其他人

作业:
  1.梳理聊天室代码思路
  2.整理fork创建进程的特征
  3.创建父子进程同时复制一个文件,
    各复制文件的一半到新的文件中