day08笔记:
集合 set
  集合是可变的容器
  集合内的数据对象都是唯一的(不能重复多次的)
  集合是无序的存储结构,集合中的数据没有先后关系
  集合内的数据必须是不可变对象
  集合是可迭代对象
  集合是相当于只有键没有值的字典(键则是集合的数据)

创建空集合:
  set()
创建非空集合:
  s = {1, 2, 3}
集合的构造函数 set
  set()  创建一个空的集合对象(不能用{}来创建空集合)
  set(iterable) 是可迭代对象创建一个新的集合对象

  示例:
    s = set() # 空集合
    s = {3, 5, 7, 9}
    s = set("ABC") # {'A', 'B', 'C'}
    s = set("ABCCBA") # {'A', 'B', 'C'}
    s = set({1:'一',2:'二',3:'三'}) #s = {1, 2, 3}
    s = set([1,2.0,3.14,False])
    s = set([True,None,'ABC',(1,2,3)])

集合的运算:
  交集 & , 并集 | , 补集 - , 对称补集 ^ 
  子集 < , 超集 >

& 生成两个集合的交集
  s1 = {1,2,3}
  s2 = {2,3,4}
  s3 = s1 & s2  # s3 = {2,3}

| 生成两个集合的并集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 | s2  # s3 = {1, 2, 3, 4}

- 生成两个集合的补 
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 - s2  # {1}

^ 生成两个集合的对称补集
  s1 = {1, 2, 3}
  s2 = {2, 3, 4}
  s3 = s1 ^ s2  # {1, 4}

< 判断一个集合是另一个集合的子集
> 判断一个集合是另一个集合的超集
  s1 = {1, 2, 3}
  s2 = {2, 3}
  s1 > s2 # True   s1是 s2的超集
  s2 < s1 # True   s2是 s1的子集

== , != 判断集合相同 / 不同 
  s1 = {1, 2, 3}
  s2 = {3, 2, 1}
  s1 == s2  #True
  s2 != s1  #True

>= <= 略

in / not in 运算符
  等同于列表的in运算符,用于判断一个元素是否存在于集合中,如果存在则返回True,否则返回False
  not in 与 in相反

  if 2 in {1, 2, 3}:
        print("2在{1, 2, 3}内")  #True

用于集合的函数:
  len(x)/max(x)/min(x)/
  sum(x)/any(x)/all(x)

练习:
  经理有: 曹操,刘备,孙权
  技术员有: 曹操,孙权,张飞,关羽
  用集合求:
    1.既是经理也是技术员的人有谁?
    2.是经理,但不是技术员的人有谁?
    3.是技术员,但不是经理的人有谁?
    4.张飞是经理的吗?
    5.身兼一职的有谁?
    6.经理和技术员共有几个人?

集合常用的方法:
  文档参见：
    python_base_docs_html/set.html

集合是可迭代对象
  s = {1,2,3}
    for x in s:
        pass
    L = [x**2 for x in s]

集合推导式
  集合推导式是用可迭代对象创建集合的表达式

  语法：
    {表达式 for 变量 in 可迭代对象 [if 真值表达式]}
  注：[]里的内容代表可以省略
  示例:
     s = "ABC"
     s2 = {x for x in s}  # s2 = {'A','B','C'}
     L = [1,2,3,4,5,3,4,5,6]
     s3 = {x ** 2 for x in L}

推导式的总结:
  三种:
    列表推导式 [x for x in L if ...]
    字典推导式 {x: x**2 for x in L if ...}
    集合推导式 {x for x in L if ...}

固定集合  frozenset
  固定集合是不可变的,无序的，含有唯一元素的集合

  作用:
    固定集合可以作为字典的键,也可以作为集合的值
固定集合的构造函数:
  frozenset()           创建一个空的固定集合对象
  frozenset(iterable)   用可迭代对象创建一个固定集合对象  

示例:
  fs = frozenset()  #创建空固定集合
  fs = frozenset('ABCCBA')  
  # fs = frozenset({'B', 'C', 'A'})
  fs = frozenset(range(10))
  fs = frozenset({1, 2, 3})
  s = {frozenset({1, 2, 3}), 100, 200}

固定集合的运算:
  & 交集
  | 并集
  - 补集
  ^ 对称补集
  < <= > >= == !=
  in / not in 运算
  (以上运算符用法与 set 相同)

固定集合的方法:
    相当于集合的全部方法去掉修改集合的方法
    详见:
        help(frozenset)
    
阶段总结:
  数据类型
    不可变数据类型
      bool,int,float,complex,str,tuple,frozenset,bytes(字节串)
    可变数据类型
      list,dict,set,bytearray(字节数组)
  运算符:
    + - * / // % **
    > >= < <= == !=
    is / is not
    in / not in
    not and or
    & ^ | 
    +(正号), -(负号)
    [] 索引/切片

表达式
  1
  1 + 2 
  max(1,2,3) + max(4,5,6)
  print("hello")
  条件表达式  x if x > y else y
  全部的推导式: 列表,字典,集合推导式(三种)

语句:
  表达式语句
    print("hello")
  赋值语句:
    a = 100
    a = b = c = 200
    x, y = 100, 200
  del      语句
  if       语句
  while    语句
  for      语句
  break    语句
  continue 语句
  pass     语句

內建函数:
 - 用于容器的函数
    len(x)
    max(x)
    min(x)
    sum(x)
    any(x)
    all(x)
 - 构造函数
    int(x)
    bool(x)
    float(x)
    complex(x)
    str(x)
    list(x)
    tuple(x)
    dict(x)
    set(x)
    frozenset(x)
 - 数值处理函数
    abs(x)----绝对值
    round(x)----四舍五入
    pow(x, y, z=None) - x的y次方  求幂
 - 进制字符串
    bin(x)   2
    oct(x)   8
    hex(x)   16
 - 编码转换
    chr(x)  整数转字符
    ord(x)  字符转整数
 - 返回可迭代对象的函数
    range(start,stop,step)
    reqversed(x) ----------反转序列 [::-1]
 - 输入输出函数:
    input()
    print(......,sep=' ',end='\n')
 - 其他
    id(x)
    type(x)

函数 function
  什么是函数
    函数是可以重复执行的语句块,可以重复的调用函数是面向过程编程的最小单位
  作用:
    1.用于封装语句块,提高代码的复用性
    2.定义用户级别的函数

def 语句
  语法:
    def 函数名(形参列表):
        语句块
  说明:
    1.函数的名字就是语句块的名称
    2.函数的命名规则和变量名的规则相同(必须是标识符)
    3.函数名是一个变量(不要轻易对其赋值)
    4.函数由自己的名字空间,在函数外部不可能访问函数内部的变量,在函数内部可以访问函数外部的变量
      要让函数处理wilbur的数据最好用参数给函数传入一些数据
    5.函数如果不需要传入参数,参数列表可以为空
    6.语句部分不能为空,如果为空需要填充pass语句
  示例见:
    def.py
    def2.py

函数调用
  函数名(实际调用传递参数)
  说明:
    函数调用是一个表达式.如果函数内没有return语句.默认返回None对象

练习:
  写一个函数myadd,此函数中的参数列表里有两个参数x,y,此功能是打印x + y的和:
  如:
    def myadd(...):
        ...       #...是需要填充的部分

    myadd(100, 200) # 打印300
    myadd('ABC','123') # 打印 ABC123

return 语句
  语法:
    return [表达式]
    注: [] 代表其中的内容可省略
  作用:
    用于函数中,结束当前函数的执行,返回到调用函数的地方,同时返回一个对象的引用关系
  说明:
    1.return 语句后跟的表达式可以省略,省略后相当于return None
    2.如果函数内没有return语句,则函数执行完最后一条语句后返回None(相当于在最后加了一条return None语句)
  示例见:
    return.py

练习:
  1.写一个函数 myadd2, 实现给出两个数,返回两个数的和
    如:
      def myadd(x, y):
          ......
      a = int(input("请输入第一个数:"))
      b = int(input("请输入第二个数:"))
      print("您输入的这两个数的和是",myadd2(a,b))

  2.写一个函数mymax3,返回三个数最大的一个值
  def mymax3(a, b, c):
        ...
  print(mymax3(100, 300, 200))
  print(mymax3('ABC','200','abc'))

  3.写一个函数 input_numbers, 如下:
    def input_numbers():
        ......#此处自己实现
    此函数用来获取用户循环输入的正整数,当用户输入负数时结束输入
    将用户输入的数字以列表的形式返回,再用内建函数max,min,sum求出用户输入的最大值,最小值及和
    L = input_numbers()
    print(L)
    print('用户输入的最大数是:',max(L)
    print('用户输入的最小数是:',min(L)
    print('用户输入的数的和是:',sum(L)


练习:
  1.写一个函数get_chinese_char_count(s) 函数,此函数实现的功能是给定一个字符串,返回一个字符串中文字符的个数
    def get_chinese_char_count(s):
          ...
    s = input("请输入中英文混合的字符串:")
    print("您输入的中文字符的个数是:",get_chinese_char_count))
  2.定义两个函数:
      sum3(a, b, c) 用于返回三个数的和
      pow3(x) 用于返回x的三次方(立方)
    用以上函数计算:
      1)计算 1的立方+ 2的立方 + 3的立方
      2)计算 1 + 2 + 3的和的立方
      即: 1**3 + 2**3 + 3**3 和 (1+2+3)**3