day15笔记：
  生成器 Generator (python2.5及之后)
    生成器是能够动态提供数据的可迭代对象
    生成器是在运行时生成数据,与容器类不同,它通常不会在内存中保存大量的数据,而是现用现生成
  生成器有两种:
    1. 生成器函数
    2. 生成器表达式
  
  生成器函数:
    含有yield语句的函数是生成器函数,此函数被调用将返回一个生成器对象
      yield翻译为(产生或生成)
  
  yield 语句
    语法:
      yield  表达式 
    说明:
      yield 用于 def 函数中,目的是将此函数作用生成器函数使用
      yield 用来生成数据, 供迭代器的next(it)函数取值
  示例见:
    gen_function.py

  生成器函数说明:
    1. 生成器函数调用将返回一个生成器对象,生成器对象是可迭代对象
    2. 在生成器函数内调用return会出发一个StopIteration 异常(即生成数据结束)
  
  生成器函数的应用示例:
    见 myinteger.py
  
  练习:
    写一个生成器函数 myeven(start, stop) 用来生成从start开始到Stop结束区间内的一系列偶数(不包含stop)
    如:
      def myeven(start, stop):
          ...
      evens = list(myeven(10, 20))
      print(evens) # [10, 12, 14, 16, 18]
      for x in myeven(5, 10):
          print(x) # 6 8
      L = [x for in myeven(0, 10)]
      print(L) # [0, 2, 4, 6, 8]
  生成器表达式:
    语法
      (表达式 for 变量 in 可迭代对象 [if 真值表达式])
    说明:
      if 子句可以省略
    作用:
      用推导式形式创建一个新的生成器
    示例:
      gen = (x ** 2 for x in range(1, 5))
      it = iter(gen)
      next(it) # 1
      next(it) # 4
      next(it) # 9
      next(it) # 16
      next(it) # StopIteration
  练习:
    已知有列表:
      L = [2, 3, 5, 7, 10, 15]
    1) 写一个生成器函数,让此函数能动态提供数据,数据为原列表的数字的平方+1
    2) 写一个生成器表达式,让此表达式能动态提供数据,数据依旧为原列表数字的平方+1
    3) 生成一个列表,此列表内的数据为原列表的数字的平方+1
  
  看下列程序的输出结果有什么不同,为什么?
    #第一段程序-------L2是一个列表,改L1,L2的数据不会修改
    L = [2, 3, 5, 7]
    L2 = [x * 10 for x in L]
    it = iter(L2)
    print(next(it)) #20
    L[1] = 30
    print(next(it)) #30
    #第二段程序------抓一个数据生成,抓一个数据生成
    L = [2, 3, 5, 7]
    L2 = (x * 10 for x in L)
    it = iter(L2)
    print(next(it)) #20
    L[1] = 30
    print(next(it)) #300
  练习:
    1. 写一个生成器函数,给出开始值begin,和终止值end,此生成器函数生成begin~end 范围内的全部素数(不包含end)
      如:
        def prime(begin, end):
            ...
        L = list(prime(10, 20))
        print(L) #[11, 13, 17, 19]
        price03.py
  迭代工具函数
    用来生成一个个性化的可迭代对象
  函数  说明
    zip(iter1[, iter2, ...]) 返回一个zip生成器对象,此对象用于生成元组,元组的数据分别来自于参数中的每个可迭代对象,生成元组的个数由最小的可迭代对象大小决定

    enumerate(iterable, start=0) 返回一个
    enumerate生成器对象,此对象生成类型为(索引,值)的元组,默认索引从零开始,也可以用start指定

    示例:
      numbers = [10086, 10000, 10010, 95588]
      names = ['中国移动', '中国电信', '中国联通']
      for t in zip(numbers, names):
          print(t)
    zip函数的实现(用生成器函数实现)
      示例见:
        myzip.py
    enumerate 示例
      names = ['中国移动', '中国电信', '中国联通']
      for t in enumerate(names):
          print(t)  #(0, '中国移动')
                     (1, '中国电信')
                     (2, '中国联通')
    练习:
      写一个程序,读入任意行的文字,当输入空行时结束输入
      打印带有行号的输入结果
      如:
        请输入:tarena<回车>
        请输入:china<回车>
        请输入:holiday<回车>
        请输入<回车>
      输出如下:
        第1行:tarena
        第2行:china
        第3行:holiday
        price04.py
    字节串和字节数组
      回顾:
        序列:
          列表,元组,字符串,字节串,字节数组
    字节串(也叫字节序列) bytes
      作用:
        存储以字节为单位的数据
      说明:
        字符串是不可改变的序列
    
    字节 byte:
      字节是0~255之间的整数,用来表示字节的取值
    位 bit:
    
    创建空字节串的字面值:
      b''
      b""
      b''''''
      b""""""
    创建非空的字节串字面值:
      b'ABCD'
      b"ABCD"
      b'\x41\x42\x43\x44'
    
    字节串构造函数 bytes
      bytes() 生成一个空的字节串,等同于b''
      bytes(整型可迭代对象) # 用可迭代对象初始化一个字节串
      bytes(整数n) 生成n个值为0的字节串
      bytes(字符串, encoding='utf-8') 用字符串的转换编码生成一个字节串
    示例:
      b = bytes() # b = b''
      b = bytes(range(65, 70)) # b=b'ABCDE'
      b = bytes(5) # b=b'\x00\x00\x00\x00\x00'
      b = bytes("ABC", 'utf-8') # b=b'ABC'
      b = bytes("中文", 'utf-8') # b=???

    bytes 的运算:
      同其他的序列的运算规则相同
        + += * *=
        < <= > >= == !=
        in / not in
        索引和切片
    能用于字节串和字节数组的函数:
      len(x), max(x), min(x) ,sum(x), any(x), all(x)
    bytes 和 str的区别
      bytes 存储字节(字节是0~255的整数)
      str 存储unicode字符(字符串是0~65536的整数)
    bytes 与 str转换
      编码(encode)
      str----------->bytes
        b = s.encode(encoding='utf-8')
            解码(decode)
      bytes -------------->str
        s = b.decode(encoding='utf-8')
    示例:
      s = '我是中文'
      b = s.encode('utf-8')
      s2 = b.decode('utf-8')

    字节数组 bytearray
      可变的字节序列
    字节数组的构造函数 bytearray
      bytearray() 生成一个空的字节数组
      bytearray(整型可迭代对象) # 用可迭代对象初始化一个字节数组
      bytearray(整数n) 生成n个值为0的字节数组
      bytearray(字符串, encoding='utf-8') 用字符串的转换编码生成一个字节数组
    
    运算:
      运算规则同序列完全相同
        + += * *=
        < <= > >= == !=
        in / not in
        索引和切片
        字节数组支持切片和索引的赋值操作,规则同列表的赋值规则完全相同
    字节数组的方法见文档:
      python_base_docs_html/bytearray.html
    练习:
      有一个bytearray字节数组
        ba = bytearray(b'a1b2c3d4')
        如何得到字节数串'1234'和'abcd'
        将上述字节数组改为:
          ba = bytearray(b'A1B2C3D4')
        